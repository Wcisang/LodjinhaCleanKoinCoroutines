ext {
    gsonVersion = '2.8.5'
    rxJavaVersion = '2.0.2'
    javaxAnnotationVersion = '1.0'
    javaxInjectVersion = '1'
    retrofitVersion = '2.5.1-SNAPSHOT'
    daggerVersion = '2.21'
    rxKotlinVersion = '2.1.0'
    rxAndroidVersion = '2.0.1'
    archCompVersion = '2.2.0-alpha01'
    okHttpVersion = '3.8.1'

    //Testing
    jUnitVersion = '4.12'
    assertJVersion = '3.8.0'
    mockitoKotlinVersion = '2.1.0'
    robolectricVersion = '3.4.2'
    mockitoVersion = '1.9.5'
    mockitoAndroidVersion = '2.8.9'
    androidSupportRunnerVersion = '1.0.0'
    androidSupportRulesVersion = '1.0.0'
    dexmakerMockitoversion = '2.2.0'
    runnerVersion = '0.5'
    espressoVersion = '3.0.0'

    gson = "com.google.code.gson:gson:$gsonVersion"
    kotlinStd = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    kotlinReflect = "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    javaxAnnotation = "javax.annotation:jsr250-api:${javaxAnnotationVersion}"
    javaxInject = "javax.inject:javax.inject:${javaxInjectVersion}"
    rxJava = "io.reactivex.rxjava2:rxkotlin:${rxJavaVersion}"

    daggerCompiler = "com.google.dagger:dagger-compiler:${daggerVersion}"
    dagger = "com.google.dagger:dagger:${daggerVersion}"
    daggerSupport = "com.google.dagger:dagger-android-support:${daggerVersion}"
    daggerProcessor = "com.google.dagger:dagger-android-processor:${daggerVersion}"
    rxKotlin = "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}"
    rxAndroid = "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"

    archCompExtensions = "androidx.lifecycle:lifecycle-extensions:${archCompVersion}"

    okHttp = "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    okHttpLogger = "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"
    retrofit = "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    retrofitConverter = "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    retrofitAdapter = "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    moshiConverver = 'com.squareup.retrofit2:converter-moshi:2.5.1-SNAPSHOT'



    junit = "junit:junit:${jUnitVersion}"
    mockito = "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    assertj = "org.assertj:assertj-core:${assertJVersion}"
    kotlinJUnit = "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
    robolectric = "org.robolectric:robolectric:${robolectricVersion}"
    archTesting = "android.arch.core:core-testing:${archCompVersion}"

    //koin
    koinViewModel =  'org.koin:koin-android-viewmodel:2.0.0-GA4'
    koin  = 'org.koin:koin-android:2.0.0-GA4'

    //coroutines
    coroutinesAdapter =  'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    coroutines = 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'

    viewModelKtx = "androidx.lifecycle:lifecycle-viewmodel:${archCompVersion}"


    domainDependencies = [
            gson: gson,
            kotlinStd: kotlinStd,
            kotlinReflect: kotlinReflect,
            coroutines : coroutines,
            moshiConverver: moshiConverver
    ]

    domainTestDependencies = [
            junit: junit,
            mockito: mockito,
            assertj: assertj
    ]

    dataDependencies = [
            retrofit: retrofit,
            retrofitGsonConverter: retrofitConverter,
            okHttp: okHttp,
            okHttpLogger: okHttpLogger,
            retrofitAdapter: retrofitAdapter,
            coroutines : coroutines,
            coroutinesAdapter: coroutinesAdapter,
            moshiConverver: moshiConverver
    ]

    dataTestDependencies = [
            junit: junit,
            mockito: mockito,
            assertj: assertj,
            kotlinJUnit: kotlinJUnit
    ]

    uiDependencies = [
            archCompExtensions: archCompExtensions,
            koinViewModel: koinViewModel,
            koin: koin,
            coroutines: coroutines,
            viewModelKtx: viewModelKtx
    ]

    uiTestDependencies = [
            junit:              junit,
            kotlinJUnit:        kotlinJUnit,
            assertj:            assertj,
            mockito:            mockito,
            robolectric:        robolectric,
            archTesting:        archTesting
    ]
}